import sys
sys.path.append('../stack 괄호 맞추기')
from stack import Stack

# infix 형식으로 작성된 표현식을 받아서 
# postfix 형식으로 변경하여 넘겨주는 함수 
# 제한 1 : 한자리 수의 피연산자로 제한 (두자리 수 이상의 피연산자가 인지되면 경고메시지를 출력하고 작업을 종료한다)
# 제한 2 : 단항연산자(음수/양수 표시)는 고려하지 않는다
# def postfix형식으로변경하여응답하기(infix형식으로작성된표현식):
  # 넘어온 문자열을 출력하여 표시한다.(확인용)
  # postfix로 변경되어 저장될 Stack(1)을 준비한다. 
  # postfix로 변경하기 전 피연산자들의 우선순위에 따라 임시 저장할 Stack(2)을 준비한다. 
  
  # infix형식으로작성된표현식의 첫번째 문자열(토큰이라 한다)부터 맨마지막 문자열까지 차례대로 아래 작업(3)을 반복한다
    # 토큰이 피연산자(숫자)이면 
      # 해당 토큰을 Stack(1)에 push하고 아래 작업은 더이상 실행하지 않고 다음 토큰에 대한 작업(3)을 다시 진행한다 
      # continue
    # 토큰이 '(' 이면
      # 해당 토큰을 Stack(2)에 push하고 아래 작업은 더이상 실행하지 않고 다음 토큰에 대한 작업(3)을 다시 진행한다 
      # continue
    # 토큰이 ')' 이면
      # 아래 작업(4)을 중단될 때까지 반복한다
        # Stack(2)를 pop한다
        # pop할 연산자가 없다면
          # 작업(4)을 중단하고 오류 처리한다 + 작업(3)도 중단한다
        # pop된 연산자가 '('이면
          # 작업(4)을 중단한다
          # break
        # pop된 연산자를 Stack(1)에 push하고 작업(4)을 다시 진행한다
      # 작업(4)이 오류없이 중단되었으면 아래 작업은 더이상 실행하지 않고 다음 토큰에 대한 작업(3)을 다시 진행한다 
      # continue
    # 토큰의 우선순위에 따라 아래 작업(5)을 반복한다
      # 토큰 '*','/'의 우선순위는 '+','-'의 우선순위보다 높다 
      # Stack(2)의 top을 확인하고 토큰과의 우선순위를 비교한다 
      # Stack(2)의 top의 우선순위가 토큰보다 높거나 같으면 
        # Stack(2)를 pop하여 Stack(1)에 push한다
        # 작업(5)를 다시 진행한다
      # Stack(2)의 top의 우선순위가 토큰보다 낮으면 
        # 해당 토큰을 Stack(2)에 push한다 
        # 작업(5)을 중단한다
    # 아래 작업은 더이상 실행하지 않고 다음 토큰에 대한 작업(3)을 다시 진행한다 
    # continue
  
  # Stack(2)의 top이 있을 때까지 작업(6)을 반복한다
    # Stack(2)를 pop한 후 Stack(1)에 push한다
  
  # infix형식으로 넘어온 문자열이 전부 postfix로 변경되면
  # Stack(1)을 넘겨주고 함수실행을 종료한다